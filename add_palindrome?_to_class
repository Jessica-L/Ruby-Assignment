# Part 10(a): Palindromes continued
# Add method named palindrome? to the String class

class String
    def palindrome?
        # Change all uppercase to lowercase & remove non-letter chars
        letters = self.downcase.scan(/\w/)
	# Compare string with its reverse, return true if equal, false if not
        letters == letters.reverse
    end
end

# Part 10(b): Palindromes continued
# Add method named palindrome? to Enumerable module
# to detect palindromic numeric lists

module Enumerable
    def palindrome?
       # Convert list to array on which we can call reverse
       a = to_a
       # Return true if equivalent to its reverse
       a == a.reverse
    end
end


# TEST CODE:

puts "Test 1: Is 'A man, a plan, a canal -- Panama!' a palindrome?"
puts "A man, a plan, a canal -- Panama!".palindrome?

puts "Test 2: Is 'Madam, I'm Adam!' a palindrome?"
puts "Madam, I'm Adam!".palindrome?

puts "Test 3: Is 'Abracadabra' a palindrome?"
puts "Abracadabra".palindrome?

puts "Test 4: Is 'foo' a palindrome?"
puts "foo".palindrome?

puts "Test 5: (using [1,2,3,2,1])"
puts [1,2,3,2,1].palindrome?

puts "Test 6: (using [1,1,3,2,1])"
puts [1,1,3,2,1].palindrome?

puts "Test 7: (using '123454321')"
puts "123454321".palindrome?


# Referenced:  
# http://stackoverflow.com/questions/8462512/ruby-way-to-check-for-string-palindrome and
# http://stackoverflow.com/questions/15858673/how-to-check-if-an-appropriate-enumerable-is-a-palindrome
